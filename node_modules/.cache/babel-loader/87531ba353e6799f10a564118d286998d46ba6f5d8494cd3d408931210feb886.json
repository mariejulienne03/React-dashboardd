{"ast":null,"code":"var _jsxFileName = \"/Users/mariejulienne/Desktop/exercicesReact/dashboard/dashboard/src/Component/Graphique/MapGraphique.js\";\nimport React from 'react';\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport * as topojson from 'topojson-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/deldersveld/topojson/master/continents/asia.json\";\nconst mapConfig = {\n  center: [120, 25],\n  scale: 600,\n  projection: \"geoMercator\"\n};\nconst chinaAndSouthKorea = [\"China\", \"South Korea\"];\nexport default function MapGraphique() {\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    ...mapConfig,\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: _ref => {\n        let {\n          geographies\n        } = _ref;\n        return geographies.map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          geography: geo,\n          style: {\n            default: {\n              fill: chinaAndSouthKorea.includes(geo.properties.NAME) ? geo.properties.NAME === 'China' ? \"#2196f3\" : geo.properties.NAME === 'South Korea' ? \"red\" : \"#E2E4E7\" : \"#E2E4E7\",\n              stroke: \"#FFFFFF\",\n              strokeWidth: 0.5\n            },\n            hover: {\n              fill: \"#182954\",\n              stroke: \"#FFFFFF\",\n              strokeWidth: 0.5\n            },\n            pressed: {\n              fill: \"#182954\",\n              stroke: \"#FFFFFF\",\n              strokeWidth: 0.5\n            }\n          }\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 15\n        }, this));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 7\n  }, this);\n}\n_c = MapGraphique;\nvar _c;\n$RefreshReg$(_c, \"MapGraphique\");","map":{"version":3,"names":["React","ComposableMap","Geographies","Geography","topojson","jsxDEV","_jsxDEV","geoUrl","mapConfig","center","scale","projection","chinaAndSouthKorea","MapGraphique","children","geography","_ref","geographies","map","geo","style","default","fill","includes","properties","NAME","stroke","strokeWidth","hover","pressed","rsmKey","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mariejulienne/Desktop/exercicesReact/dashboard/dashboard/src/Component/Graphique/MapGraphique.js"],"sourcesContent":["import React from 'react';\nimport {ComposableMap, Geographies, Geography} from \"react-simple-maps\";\nimport * as topojson from 'topojson-client';\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/deldersveld/topojson/master/continents/asia.json\";\n\nconst mapConfig = {\n  center: [120, 25],\n  scale: 600,\n  projection: \"geoMercator\"\n};\n\n\nconst chinaAndSouthKorea = [\"China\", \"South Korea\"];\n\nexport default function MapGraphique() {\n    return (\n      <ComposableMap {...mapConfig}>\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map((geo) => (\n              <Geography\n                key={geo.rsmKey}\n                geography={geo}\n                style={{\n                  default: {\n                    fill: chinaAndSouthKorea.includes(geo.properties.NAME) ? (geo.properties.NAME === 'China' ? \"#2196f3\" : (geo.properties.NAME === 'South Korea' ? \"red\" : \"#E2E4E7\")) : \"#E2E4E7\",\n                    stroke: \"#FFFFFF\",\n                    strokeWidth: 0.5\n                  },\n                  hover: { fill: \"#182954\", stroke: \"#FFFFFF\", strokeWidth: 0.5 },\n                  pressed: { fill: \"#182954\", stroke: \"#FFFFFF\", strokeWidth: 0.5 }\n                }}\n              />\n            ))\n          }\n        </Geographies>\n      </ComposableMap>\n    );\n  }\n  \n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,aAAa,EAAEC,WAAW,EAAEC,SAAS,QAAO,mBAAmB;AACvE,OAAO,KAAKC,QAAQ,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,MAAMC,MAAM,GACV,oFAAoF;AAEtF,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;EACjBC,KAAK,EAAE,GAAG;EACVC,UAAU,EAAE;AACd,CAAC;AAGD,MAAMC,kBAAkB,GAAG,CAAC,OAAO,EAAE,aAAa,CAAC;AAEnD,eAAe,SAASC,YAAYA,CAAA,EAAG;EACnC,oBACEP,OAAA,CAACL,aAAa;IAAA,GAAKO,SAAS;IAAAM,QAAA,eAC1BR,OAAA,CAACJ,WAAW;MAACa,SAAS,EAAER,MAAO;MAAAO,QAAA,EAC5BE,IAAA;QAAA,IAAC;UAAEC;QAAY,CAAC,GAAAD,IAAA;QAAA,OACfC,WAAW,CAACC,GAAG,CAAEC,GAAG,iBAClBb,OAAA,CAACH,SAAS;UAERY,SAAS,EAAEI,GAAI;UACfC,KAAK,EAAE;YACLC,OAAO,EAAE;cACPC,IAAI,EAAEV,kBAAkB,CAACW,QAAQ,CAACJ,GAAG,CAACK,UAAU,CAACC,IAAI,CAAC,GAAIN,GAAG,CAACK,UAAU,CAACC,IAAI,KAAK,OAAO,GAAG,SAAS,GAAIN,GAAG,CAACK,UAAU,CAACC,IAAI,KAAK,aAAa,GAAG,KAAK,GAAG,SAAU,GAAI,SAAS;cAChLC,MAAM,EAAE,SAAS;cACjBC,WAAW,EAAE;YACf,CAAC;YACDC,KAAK,EAAE;cAAEN,IAAI,EAAE,SAAS;cAAEI,MAAM,EAAE,SAAS;cAAEC,WAAW,EAAE;YAAI,CAAC;YAC/DE,OAAO,EAAE;cAAEP,IAAI,EAAE,SAAS;cAAEI,MAAM,EAAE,SAAS;cAAEC,WAAW,EAAE;YAAI;UAClE;QAAE,GAVGR,GAAG,CAACW,MAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAYlB,CAAC;MAAA;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEQ;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEpB;AAACC,EAAA,GAxBqBtB,YAAY;AAAA,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}