{"ast":null,"code":"var _jsxFileName = \"/Users/mariejulienne/Desktop/exercicesReact/dashboard/dashboard/src/Component/Graphique/MapGraphique.js\";\nimport React from 'react';\nimport { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geoUrl = \"https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json\";\nconst mapConfig = {\n  center: [120, 25],\n  scale: 600,\n  projection: \"geoMercator\"\n};\nconst grayStyle = {\n  default: {\n    fill: \"#D6D6DA\",\n    stroke: \"#FFFFFF\",\n    strokeWidth: 0.5\n  },\n  hover: {\n    fill: \"#F53\",\n    stroke: \"#FFFFFF\",\n    strokeWidth: 0.5\n  },\n  pressed: {\n    fill: \"#F53\",\n    stroke: \"#FFFFFF\",\n    strokeWidth: 0.5\n  }\n};\nconst selectedCountries = [\"China\", \"Taiwan\", \"Singapore\", \"South Korea\"];\nexport default function MapGraphique() {\n  return /*#__PURE__*/_jsxDEV(ComposableMap, {\n    ...mapConfig,\n    children: /*#__PURE__*/_jsxDEV(Geographies, {\n      geography: geoUrl,\n      children: _ref => {\n        let {\n          geographies\n        } = _ref;\n        return geographies.filter(geo => selectedCountries.includes(geo.properties.NAME)).map(geo => /*#__PURE__*/_jsxDEV(Geography, {\n          geography: geo,\n          style: grayStyle\n        }, geo.rsmKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 15\n        }, this));\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 6\n  }, this);\n}\n_c = MapGraphique;\nvar _c;\n$RefreshReg$(_c, \"MapGraphique\");","map":{"version":3,"names":["React","ComposableMap","Geographies","Geography","jsxDEV","_jsxDEV","geoUrl","mapConfig","center","scale","projection","grayStyle","default","fill","stroke","strokeWidth","hover","pressed","selectedCountries","MapGraphique","children","geography","_ref","geographies","filter","geo","includes","properties","NAME","map","style","rsmKey","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/mariejulienne/Desktop/exercicesReact/dashboard/dashboard/src/Component/Graphique/MapGraphique.js"],"sourcesContent":["import React from 'react';\nimport {ComposableMap, Geographies, Geography} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/deldersveld/topojson/master/world-countries.json\";\n\nconst mapConfig = {\n  center: [120, 25],\n  scale: 600,\n  projection: \"geoMercator\"\n};\n\nconst grayStyle = {\n  default: { fill: \"#D6D6DA\", stroke: \"#FFFFFF\", strokeWidth: 0.5 },\n  hover: { fill: \"#F53\", stroke: \"#FFFFFF\", strokeWidth: 0.5 },\n  pressed: { fill: \"#F53\", stroke: \"#FFFFFF\", strokeWidth: 0.5 }\n};\n\nconst selectedCountries = [\n  \"China\",\n  \"Taiwan\",\n  \"Singapore\",\n  \"South Korea\"\n];\n\nexport default function MapGraphique() {\n  return (\n     <ComposableMap {...mapConfig}>\n      <Geographies geography={geoUrl}>\n        {({ geographies }) =>\n          geographies\n            .filter(geo => selectedCountries.includes(geo.properties.NAME))\n            .map((geo) => (\n              <Geography key={geo.rsmKey} geography={geo} style={grayStyle} />\n            ))\n        }\n      </Geographies>\n    </ComposableMap>\n  );\n}\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAAQC,aAAa,EAAEC,WAAW,EAAEC,SAAS,QAAO,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExE,MAAMC,MAAM,GACV,oFAAoF;AAEtF,MAAMC,SAAS,GAAG;EAChBC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC;EACjBC,KAAK,EAAE,GAAG;EACVC,UAAU,EAAE;AACd,CAAC;AAED,MAAMC,SAAS,GAAG;EAChBC,OAAO,EAAE;IAAEC,IAAI,EAAE,SAAS;IAAEC,MAAM,EAAE,SAAS;IAAEC,WAAW,EAAE;EAAI,CAAC;EACjEC,KAAK,EAAE;IAAEH,IAAI,EAAE,MAAM;IAAEC,MAAM,EAAE,SAAS;IAAEC,WAAW,EAAE;EAAI,CAAC;EAC5DE,OAAO,EAAE;IAAEJ,IAAI,EAAE,MAAM;IAAEC,MAAM,EAAE,SAAS;IAAEC,WAAW,EAAE;EAAI;AAC/D,CAAC;AAED,MAAMG,iBAAiB,GAAG,CACxB,OAAO,EACP,QAAQ,EACR,WAAW,EACX,aAAa,CACd;AAED,eAAe,SAASC,YAAYA,CAAA,EAAG;EACrC,oBACGd,OAAA,CAACJ,aAAa;IAAA,GAAKM,SAAS;IAAAa,QAAA,eAC3Bf,OAAA,CAACH,WAAW;MAACmB,SAAS,EAAEf,MAAO;MAAAc,QAAA,EAC5BE,IAAA;QAAA,IAAC;UAAEC;QAAY,CAAC,GAAAD,IAAA;QAAA,OACfC,WAAW,CACRC,MAAM,CAACC,GAAG,IAAIP,iBAAiB,CAACQ,QAAQ,CAACD,GAAG,CAACE,UAAU,CAACC,IAAI,CAAC,CAAC,CAC9DC,GAAG,CAAEJ,GAAG,iBACPpB,OAAA,CAACF,SAAS;UAAkBkB,SAAS,EAAEI,GAAI;UAACK,KAAK,EAAEnB;QAAU,GAA7Cc,GAAG,CAACM,MAAM;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAC3B,CAAC;MAAA;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAEM;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACA;AAEpB;AAACC,EAAA,GAduBjB,YAAY;AAAA,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}